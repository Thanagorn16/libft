/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: truangsi <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/09/29 20:36:36 by truangsi          #+#    #+#             */
/*   Updated: 2022/10/01 00:00:54 by truangsi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_countword(char const *s, char c)
{
	int	i;
	int	cw;

	i = 0;
	cw = 0;
	while (s[i])
	{
		while (s[i] && s[i] == c)
			i++;
		while (s[i] && s[i] != c)
		{
			i++;
			if (s[i] == c || s[i] == '\0')
				cw++;
		}
	}
	return (cw);
}

char	*ft_malloc_word(const char *str, char c, int *start)
{
	char	*word;
	int		i;
	int		len;

	len = 0;
	i = 0;
	while (str[*start] == c)
		*start += 1;
	while (str[*start + len] != c && str[*start + len] != '\0')
		len++;
	word = malloc(sizeof(char) * (len + 1));
	while (i < len)
	{
		word[i] = str[*start + i];
		i++;
	}
	*start += len;
	word[i] = '\0';
	return (word);
}

char	**ft_split(char const *s, char c)
{
	char	**split;
	int		cw;
	int		i;
	int		start;

	i = 0;
	start = 0;
	if (!s)
		return (NULL);
	cw = ft_countword(s, c);
	split = (char **)malloc(sizeof(char *) * (cw + 1));
	if (!split)
		return (NULL);
	while (i < cw)
	{
		split[i] = ft_malloc_word(s, c, &start);
		i++;
	}
	split[i] = NULL;
	return (split);
}
char	get_mal(char const *s, char c)
{
	int		count;
	int		slot;
	int		i;
	char	**arr;

	count = 0;
	i = 1;
	slot = 0;

	while (s[i] && ft_strlen(s) != 0)
	{
		if (s[0] != c && i == 1)
			slot++;
		if (s[i - 1] == c && s[i] != c)
			slot++;
		i++;
	}
	slot++;
	// arr = (char **) malloc(slot * sizeof(char *));
	return (slot);
}

char	**insert(char const *s, char c, int slot, char **arr)
{
	int	i;
	int	j;
	int	count;

	i = 0;
	j = 0;
	count = 0;
	while (i < slot)
	{
		while (s[count] == c)
			count++;
		while (s[count] != c && s[count] != '\0')
		{
			arr[i][j] = s[count];
			j++;
			count++;
		}
		arr[i][j] = '\0';
		j = 0;
		i++;
	}
	arr[slot] = NULL;
	return (arr);
}

char	**allocate(char const *s, char c, char **arr)
{
	int		count;
	int		slot;
	size_t	i;

	i = 0;
	count = 0;
	slot = 0;
	while (i < ft_strlen(s) )
	{
		while (s[i] != c && s[i] != '\0')
		{
			i++;
			count++;
		}
		if (count > 0)
		{
			// arr[slot] = (char *) malloc((count  + 1) * sizeof(char));
			arr[slot] = (char *) malloc(count  + 1);
			slot++;
			count = 0;
		}
		i++;
	}
	arr = insert(s, c, slot, arr);
	return (arr);
}

char	**ft_split(char const *s, char c)
{
	int		count;
	int		slot;
	size_t	i;
	char	**arr;

	slot = 0;
	count = 0;
	i = 0;
	if (!s)
		return (NULL);
	slot = get_mal(s, c);
	if (!arr)
		return (NULL);
	arr = (char **) malloc(slot * sizeof(char *));
	arr = allocate(s, c, arr);
	// printf("last:%s\n", arr[0]);
	return (arr);
}
/*
int	main(void)
{
	// char	*str = "tripouille  42  ";
	// char	c = ' ';
	// char	*str = " tripouille";
	// char	c = ' ';
	char	*str = "      ";
	char	c = ' ';
	// char	*str = "lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse";
	// char	c = ' ';
	// char	*str = "tripouille";
	// char	c = 0;

	// char	*str = strdup("tripouille");
	// char	c = ' ';
	char	**ret;

	ret = ft_split(str, c);
	printf("ret0: |%s|\n", ret[0]);
	// printf("ret1: |%s|\n", ret[1]);
	// printf("ret2: %s\n", ret[2]);
	// printf("ret3: %s\n", ret[3]);
	// printf("ret4: %s\n", ret[4]);
	// puts("-----------");
	// free(ret[0]);
	// free(ret);
	// printf("ret0: %s\n", ret[0]);
	// printf("ret1: %s\n", ret[1]);
	// printf("ret: %s\n", ret[2]);
}
*/
